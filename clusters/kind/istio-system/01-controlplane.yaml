apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
  name: example
spec:
  profile: default
  hub: docker.io/istio
  tag: 1.6.7

  meshConfig:
    accessLogFile: "/dev/stdout"
    accessLogEncoding: JSON
    enableAutoMtls: true
    outboundTrafficPolicy:
      mode: ALLOW_ANY

    # https://istio.io/docs/reference/config/istio.mesh.v1alpha1/#ProxyConfig
    defaultConfig:
      concurrency: 2
      drainDuration: 180s
      parentShutdownDuration: 200s

  addonComponents:
    grafana:
      enabled: true
      k8s:
        replicaCount: 1
    kiali:
      enabled: true
      k8s:
        replicaCount: 1
    prometheus:
      enabled: true
      k8s:
        replicaCount: 1
        resources:
          requests:
            cpu: 10m
            memory: 1Gi
    tracing:
      enabled: true

  components:
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        overlays:
          - apiVersion: apps/v1
            kind: Deployment
            name: istio-ingressgateway
            patches:
              - path: spec.template.spec.terminationGracePeriodSeconds
                value: 90
              - path: spec.template.spec.containers[0].lifecycle
                value:
                  preStop:
                    exec:
                      command: ["/bin/sh", "-c", "sleep 5"]
        hpaSpec:
          minReplicas: 1
          maxReplicas: 2
        resources:
          limits:
            memory: 400Mi
          requests:
            cpu: 10m
            memory: 150Mi

        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - {key: istio, operator: In, values: ["ingressgateway"]}
                topologyKey: kubernetes.io/hostname
              weight: 100

        strategy:
          rollingUpdate:
            maxSurge: 100%
            maxUnavailable: 0%

    pilot:
      enabled: true
      k8s:
        hpaSpec:
          minReplicas: 1
          maxReplicas: 2
        env:
        - name: TERMINATION_DRAIN_DURATION_SECONDS
          value: "300"
        resources:
          requests:
            cpu: 50m
            memory: 368Mi
        strategy:
          rollingUpdate:
            maxSurge: 100%
            maxUnavailable: 0%
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - {key: istio, operator: In, values: ["pilot"]}
                topologyKey: kubernetes.io/hostname
              weight: 100

  values:
    global:
      logAsJson: true
      proxy:
        # Resources for the sidecar.
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 1000m
            memory: 150Mi

        # Gracefull shutdown until k8s sidecars support exists.
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "while [ $(netstat -plunt | grep tcp | grep -v envoy | grep -v pilot-agent | wc -l | xargs) -ne 0 ]; do sleep 3; done"]

    prometheus:
      enabled: true
      hub: docker.io/prom
      tag: v2.20.1
      retention: 6h
      contextPath: /istio/prometheus

    grafana:
      env:
        GF_SERVER_ROOT_URL: /istio/grafana
        GF_SERVER_SERVE_FROM_SUB_PATH: true
      contextPath: /istio/grafana

    kiali:
      enabled: true
      tag: v1.20
      contextPath: /istio/kiali
      dashboard:
        auth:
          strategy: anonymous
        # grafanaURL: http://<external endpoint>/istio/grafana
        # jaegerURL:  http://<external endpoint>/istio/tracing
      prometheusAddr: http://prometheus:9090

    tracing:
      contextPath: /istio/tracing

    gateways:
      istio-ingressgateway:
        type: LoadBalancer # change to NodePort, ClusterIP or LoadBalancer if need be
